#set(${className} = ${table.capitalizedCamelCaseNonModuleName})
#if($table.primaryKeyColumns.size() > 1)
	#set($primaryKeyClassName = $className + "Pk")
#end
package ${packageName};

import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Column;
import javax.persistence.Id;
#foreach(${explicitImportedJavaType} in ${table.explicitImportedJavaTypes})
	import ${explicitImportedJavaType}
#end

@Entity
@Table(name = "$table.name")
@lombok.Data
#if($table.primaryKeyColumns.size() > 1)
@javax.persistence.IdClass(${primaryKeyClassName}.class)
#end
public class ${className} {	
	#foreach(${column} in ${table.columns})
		
		#if(${column.primaryKey})
		@Id
		#end
		#if(${column.generatedKey})
			#set(${columnGeneratedKeyName} = ${table.name.toLowerCase()} + '_' + ${column.name.toLowerCase()} + '_gen_key')
			@javax.persistence.GeneratedValue(generator = "${columnGeneratedKeyName}")
			@org.hibernate.annotations.GenericGenerator(name="${columnGeneratedKeyName}", strategy="${column.generatedKeyStrategy}"#if($StringUtils.isNotEmpty($column.generatedKeyParameters)), parameters=${column.generatedKeyParameters}#end)
		#end
		@Column(name="${column.name}", nullable = ${column.nullable}#if(${column.javaType.string}), length = ${column.length}#end#if(${column.javaType.decimal}), precision = ${column.length}, scale=${column.scale}#end)
		private ${column.javaType.shortName} ${column.uncapitalizedCamelCaseName};
	#end
	
	#if($table.primaryKeyColumns.size() > 1)
		@lombok.Data
		@lombok.NoArgsConstructor
		@lombok.AllArgsConstructor
		public static class $primaryKeyClassName implements java.io.IOException {
			@java.io.Serial
			private static final long serialVersionUID = 1L;			
			#foreach($primaryKeyColumn in $table.primaryKeyColumns)
					
			private ${primaryKeyColumn.javaType.shortName} ${primaryKeyColumn.uncapitalizedCamelCaseName};
			#end
    }
    #end 
}
